CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS true)

PROJECT(aul C)
SET(VERSION_MAJOR 0)
SET(VERSION "${VERSION_MAJOR}.1.0")

### Global setting ###

SET(PREFIX ${CMAKE_INSTALL_PREFIX})
SET(EXEC_PREFIX "\${prefix}")
SET(LIBDIR "\${prefix}/lib")
SET(INCLUDEDIR "\${prefix}/include/aul")

# Build type : Release
IF("${CMAKE_BUILD_TYPE}" STREQUAL "")
	SET(CMAKE_BUILD_TYPE "Release")
ENDIF()
MESSAGE("Build type: ${CMAKE_BUILD_TYPE}")

# Set required packages
INCLUDE(FindPkgConfig)

SET(pkgs_requires "dlog ecore x11 libprivilege-control rua glib-2.0 ecore-x ecore-evas iniparser ecore-input evas vconf pkgmgr-info libresourced security-server ttrace appfw-env cert-svc")
SET(libpkgs_requires "dlog bundle dbus-glib-1 ecore-x xdgmime libsmack ecore pkgmgr-info iniparser ttrace vasum vconf capi-system-info")

IF(_APPFW_FEATURE_APP_CHECKER)
	SET(pkgs_requires "${pkgs_requires} app-checker app-checker-server")
	SET(libpkgs_requires "${libpkgs_requires} app-checker")
	ADD_DEFINITIONS("-D_APPFW_FEATURE_APP_CHECKER")
ENDIF(_APPFW_FEATURE_APP_CHECKER)

pkg_check_modules(pkgs REQUIRED ${pkgs_requires})
pkg_check_modules(libpkgs REQUIRED ${libpkgs_requires})
PKG_CHECK_MODULES(PKGS REQUIRED glib-2.0 gio-2.0 dlog bundle)

FIND_LIBRARY(LIB_DL dl)

FOREACH(flag ${libpkgs_CFLAGS})
	SET(EXTRA_CFLAGS "${EXTRA_CFLAGS} ${flag}")
ENDFOREACH(flag)

FOREACH(flag ${pkgs_CFLAGS})
	SET(TEST_CFLAGS "${TEST_CFLAGS} ${flag}")
ENDFOREACH(flag)

# Compiler flags
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include)
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/feature)
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/delegator)
SET(EXTRA_CFLAGS "${EXTRA_CFLAGS} -Wl,-zdefs" )
SET(EXTRA_CFLAGS "${EXTRA_CFLAGS} -fvisibility=hidden")
SET(EXTRA_CFLAGS "${EXTRA_CFLAGS} -fpic")
SET(EXTRA_CFLAGS "${EXTRA_CFLAGS} -Wall -Werror -Wno-unused-function")
SET(EXTRA_CFLAGS "${EXTRA_CFLAGS} -fdata-sections -ffunction-sections -Wl,--gc-sections")
SET(EXTRA_CFLAGS "${EXTRA_CFLAGS} -D_FILE_OFFSET_BITS=64")
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${EXTRA_CFLAGS}")
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${TEST_CFLAGS}")
SET(CMAKE_C_FLAGS_DEBUG "-O0 -g")
SET(CMAKE_C_FLAGS_RELEASE "-O2")

SET(CMAKE_SKIP_BUILD_RPATH true)

# Get uname value to set 'TARGET' definition
# TODO: Is this needed?
FIND_PROGRAM(UNAME NAMES uname)
EXEC_PROGRAM("${UNAME}" ARGS "-m" OUTPUT_VARIABLE "ARCH")
IF("${ARCH}" STREQUAL "arm")
	ADD_DEFINITIONS("-DTARGET")
	MESSAGE("add -DTARGET")
ENDIF("${ARCH}" STREQUAL "arm")

ADD_DEFINITIONS("-DPREFIX=\"${CMAKE_INSTALL_PREFIX}\"")
ADD_DEFINITIONS("-DSHARE_PREFIX=\"/usr/share/aul\"")
IF(_APPFW_FEATURE_PROCESS_POOL)
	ADD_DEFINITIONS("-D_APPFW_FEATURE_PROCESS_POOL")
ENDIF(_APPFW_FEATURE_PROCESS_POOL)
IF(_APPFW_FEATURE_MULTI_INSTANCE)
	ADD_DEFINITIONS("-D_APPFW_FEATURE_MULTI_INSTANCE")
ENDIF(_APPFW_FEATURE_MULTI_INSTANCE)
IF(_APPFW_FEATURE_CHANGEABLE_COLOR)
	ADD_DEFINITIONS("-D_APPFW_FEATURE_CHANGEABLE_COLOR")
ENDIF(_APPFW_FEATURE_CHANGEABLE_COLOR)
IF(_APPFW_FEATURE_CPU_BOOST)
	ADD_DEFINITIONS("-D_APPFW_FEATURE_CPU_BOOST")
ENDIF(_APPFW_FEATURE_CPU_BOOST)
IF(_APPFW_FEATURE_PRIORITY_CHANGE)
	ADD_DEFINITIONS("-D_APPFW_FEATURE_PRIORITY_CHANGE")
ENDIF(_APPFW_FEATURE_PRIORITY_CHANGE)
IF(_APPFW_FEATURE_DATA_CONTROL)
	ADD_DEFINITIONS("-D_APPFW_FEATURE_DATA_CONTROL")
ENDIF(_APPFW_FEATURE_DATA_CONTROL)
IF(_APPFW_FEATURE_DEBUG_LAUNCHPAD)
	ADD_DEFINITIONS("-D_APPFW_FEATURE_DEBUG_LAUNCHPAD")
ENDIF(_APPFW_FEATURE_DEBUG_LAUNCHPAD)
IF(_APPFW_FEATURE_APP_CONTROL_LITE)
	ADD_DEFINITIONS("-D_APPFW_FEATURE_APP_CONTROL_LITE")
ENDIF(_APPFW_FEATURE_APP_CONTROL_LITE)
IF(_APPFW_FEATURE_WMS_CONNECTION_CHECK)
	ADD_DEFINITIONS("-D_APPFW_FEATURE_WMS_CONNECTION_CHECK")
ENDIF(_APPFW_FEATURE_WMS_CONNECTION_CHECK)
IF(_APPFW_FEATURE_BG_PROCESS_LIMIT)
	ADD_DEFINITIONS("-D_APPFW_FEATURE_BG_PROCESS_LIMIT")
ENDIF(_APPFW_FEATURE_BG_PROCESS_LIMIT)
IF(_APPFW_FEATURE_TTS_MODE)
	ADD_DEFINITIONS("-D_APPFW_FEATURE_TTS_MODE")
ENDIF(_APPFW_FEATURE_TTS_MODE)
IF(_APPFW_FEATURE_ULTRA_POWER_SAVING_MODE)
        ADD_DEFINITIONS("-D_APPFW_FEATURE_ULTRA_POWER_SAVING_MODE")
ENDIF(_APPFW_FEATURE_ULTRA_POWER_SAVING_MODE)
IF(_APPFW_FEATURE_COOLDOWN_MODE_SUPPORT)
        ADD_DEFINITIONS("-D_APPFW_FEATURE_COOLDOWN_MODE_SUPPORT")
ENDIF(_APPFW_FEATURE_COOLDOWN_MODE_SUPPORT)
IF(_APPFW_FEATURE_AMD_MODULE_LOG)
        ADD_DEFINITIONS("-D_APPFW_FEATURE_AMD_MODULE_LOG")
ENDIF(_APPFW_FEATURE_AMD_MODULE_LOG)
IF(_APPFW_FEATURE_EXPANSION_PKG_INSTALL)
	ADD_DEFINITIONS("-D_APPFW_FEATURE_EXPANSION_PKG_INSTALL")
ENDIF(_APPFW_FEATURE_EXPANSION_PKG_INSTALL)
IF(_APPFW_FEATURE_BACKGROUND_MANAGEMENT)
	ADD_DEFINITIONS("-D_APPFW_FEATURE_BACKGROUND_MANAGEMENT")
ENDIF(_APPFW_FEATURE_BACKGROUND_MANAGEMENT)
IF(_APPFW_FEATURE_AMD_KEY)
	ADD_DEFINITIONS("-D_APPFW_FEATURE_AMD_KEY")
ENDIF(_APPFW_FEATURE_AMD_KEY)
IF(_APPFW_FEATURE_MMC_SUPPORT)
	ADD_DEFINITIONS("-D_APPFW_FEATURE_MMC_SUPPORT")
ENDIF(_APPFW_FEATURE_MMC_SUPPORT)
IF(_APPFW_FEATURE_SEND_HOME_LAUNCH_SIGNAL)
	ADD_DEFINITIONS("-D_APPFW_FEATURE_SEND_HOME_LAUNCH_SIGNAL")
ENDIF(_APPFW_FEATURE_SEND_HOME_LAUNCH_SIGNAL)
IF(_APPFW_FEATURE_FAKE_EFFECT)
	ADD_DEFINITIONS("-D_APPFW_FEATURE_FAKE_EFFECT")
ENDIF(_APPFW_FEATURE_FAKE_EFFECT)
IF(_APPFW_FEATURE_EFFECTIVE_APPID)
	ADD_DEFINITIONS("-D_APPFW_FEATURE_EFFECTIVE_APPID")
ENDIF(_APPFW_FEATURE_EFFECTIVE_APPID)
IF(_APPFW_FEATURE_PRIVATE_SERVICE)
	ADD_DEFINITIONS("-D_APPFW_FEATURE_PRIVATE_SERVICE")
ENDIF(_APPFW_FEATURE_PRIVATE_SERVICE)

# Linker flags
SET(CMAKE_EXE_LINKER_FLAGS "-Wl,--as-needed")


### Build ###
add_subdirectory(delegator)

# aul_mods : modules (static library)
add_library(aul_mods STATIC
		src/app_sock.c
		src/simple_util.c
		)

# aul
add_library(aul SHARED
		src/pkginfo.c
		src/launch.c
		src/launch_glib.c
		src/launch_with_result.c
		src/service.c
		src/service_db.c
		src/mime.c
		src/miregex.c
		src/app_signal.c
		src/key.c
		src/status.c
		src/runtime_info.c
		src/aul_path.c
		src/app_group.c
		src/zone.c
		src/aul_rsc_mgr.c
		)
target_link_libraries(aul aul_mods ${libpkgs_LDFLAGS})
TARGET_LINK_LIBRARIES(aul aul-delegator-client)
TARGET_LINK_LIBRARIES(aul "-ldl -lsqlite3")
SET_TARGET_PROPERTIES(aul PROPERTIES SOVERSION ${VERSION_MAJOR})
SET_TARGET_PROPERTIES(aul PROPERTIES VERSION ${VERSION})

add_executable(amd
                am_daemon/amd_main.c
		am_daemon/amd_key.c
		am_daemon/amd_request.c
		am_daemon/amd_appinfo.c
		am_daemon/amd_launch.c
		am_daemon/amd_status.c
		am_daemon/amd_app_group.c
                )
IF(_APPFW_FEATURE_AMD_KEY)
	TARGET_LINK_LIBRARIES(amd utilX)
ENDIF(_APPFW_FEATURE_AMD_KEY)
target_link_libraries(amd aul_mods rua glib-2.0 bundle pkgmgr-info aul ${pkgs_LDFLAGS} "-pie")
TARGET_LINK_LIBRARIES(amd "-ldl")

# appgroup info tool
ADD_EXECUTABLE(appgroup_info tool/app_group_info.c)
SET_TARGET_PROPERTIES(appgroup_info PROPERTIES COMPILE_FLAGS "${EXTRA_CFLAGS} -fPIE")
TARGET_LINK_LIBRARIES(appgroup_info aul_mods aul ${pkgs_LDFLAGS} "-pie")
INSTALL(TARGETS appgroup_info DESTINATION bin)

# pkgconfig file
CONFIGURE_FILE(aul.pc.in aul.pc @ONLY)


### Install ###
INSTALL(TARGETS aul DESTINATION lib COMPONENT RuntimeLibraries)
INSTALL(TARGETS amd DESTINATION bin)

INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/include/aul.h DESTINATION include/aul)
INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/include/aul_svc.h DESTINATION include/aul)
INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/include/aul_zone.h DESTINATION include/aul)
INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/include/aul_rsc_mgr.h DESTINATION include/aul)
IF (_APPFW_FEATURE_DEFAULT_FAKE_IMAGE)
	ADD_DEFINITIONS("-D_APPFW_FEATURE_DEFAULT_FAKE_IMAGE")
	INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/data/config_splash.sh DESTINATION bin)
ENDIF(_APPFW_FEATURE_DEFAULT_FAKE_IMAGE)
INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/aul.pc DESTINATION lib/pkgconfig)

INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/feature/preexec_list.txt DESTINATION /usr/share/aul )
INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/data/miregex DESTINATION /usr/share/aul )

INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/include/app_sock.h DESTINATION include/aul/launch)
INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/include/simple_util.h DESTINATION include/aul/launch)
INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/include/menu_db_util.h DESTINATION include/aul/launch)
INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/include/app_signal.h DESTINATION include/aul/launch)
INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/include/aul_util.h DESTINATION include/aul/launch)
INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/include/access_control.h DESTINATION include/aul/launch)
INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/include/perf.h DESTINATION include/aul/launch)
INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/include/app_launchpad_types.h DESTINATION include/aul/launch)
INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/feature/preexec.h DESTINATION include/aul/launchpad)
INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/libaul_mods.a DESTINATION lib)
INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/data/appsvc_db.sql DESTINATION /opt/share )

IF(_APPFW_FEATURE_AMD_MODULE_LOG)
        INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/data/amd_log_dump.sh DESTINATION /opt/etc/dump.d/module.d)
ENDIF(_APPFW_FEATURE_AMD_MODULE_LOG)

# test
add_subdirectory(test)
